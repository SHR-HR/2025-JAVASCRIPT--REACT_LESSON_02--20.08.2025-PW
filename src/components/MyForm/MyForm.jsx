// Импорт библиотеки React и хука useState для управления состоянием формы
import React, { useState } from "react";
// Импорт компонента кнопки из папки UI компонентов
import Button from "../../UI/Button/Button";
// Импорт компонента поля ввода из папки UI компонентов
import Input from "../../UI/Input/Input";

// Объявление функционального компонента MyForm (Моя Форма)
// Компонент принимает один пропс (props):
// - onAdd: функция-обработчик добавления нового элемента
function MyForm({ onAdd }) {
  // Состояние формы с двумя полями: title (заголовок) и text (текст)
  // Начальные значения - пустые строки
  const [form, setForm] = useState({ title: "", text: "" });

  // Обработчик изменения значений в полях ввода
  const handleChange = (e) => {
    // Деструктуризация объекта события: извлекаем name и value из target
    const { name, value } = e.target;
    // Обновление состояния формы: сохраняем предыдущие значения и меняем только нужное поле
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  // Обработчик отправки формы
  const handleSubmit = (e) => {
    // Предотвращаем стандартное поведение формы (перезагрузку страницы)
    e.preventDefault();
    
    // Очищаем значения от пробелов в начале и конце
    const title = form.title.trim();
    const text = form.text.trim();
    
    // Проверка: если любое из полей пустое - прерываем выполнение
    if (!title || !text) return;

    // Генерация уникального ID для нового элемента
    // Используем crypto.randomUUID() если доступно, иначе timestamp
    const id =
      (typeof crypto !== "undefined" && crypto.randomUUID?.()) ||
      String(Date.now());

    // Вызываем функцию onAdd если она передана (опциональная цепочка вызовов)
    // Передаем объект нового элемента с id, title и text
    onAdd?.({ id, title, text });
    
    // Сбрасываем форму к начальным значениям (очищаем поля)
    setForm({ title: "", text: "" });
  };

  // Возвращаем JSX разметку формы
  return (
    // Элемент формы с обработчиком onSubmit и inline стилями
    <form onSubmit={handleSubmit} style={{ display: "grid", gap: 12, maxWidth: 560 }}>
      
      {/* Поле ввода для заголовка */}
      <label style={{ display: "grid", gap: 6 }}>
        {/* Текст лейбла (если требуется то можно локализавать на русский язык) */}
        <span>Title</span>
        {/* Компонент поля ввода для заголовка */}
        <Input
          name="title"                    // Имя поля для обработки изменений
          placeholder="Введите заголовок" // Подсказка внутри поля на русском
          value={form.title}              // Привязка значения к состоянию
          onChange={handleChange}         // Обработчик изменения значения
          /* пример: без бордера как базовый вариант */
        />
      </label>

      {/* Поле ввода для текста */}
      <label style={{ display: "grid", gap: 6 }}>
        {/* Текст лейбла (если требуется то можно локализавать на русский язык) */}
        <span>Text</span>
        {/* Компонент поля ввода для текста */}
        <Input
          name="text"                    // Имя поля для обработки изменений
          placeholder="Введите текст"    // Подсказка внутри поля на русском
          value={form.text}              // Привязка значения к состоянию
          onChange={handleChange}        // Обработчик изменения значения
          /* пример: вариант, как у Button с обводкой */
          // border                      // Закомментированный пропс для границы
        />
      </label>

      {/* Кнопка отправки формы */}
      <Button>Добавить</Button>
      
    </form>
  );
}

// Экспорт компонента по умолчанию для использования в других частях приложения
export default MyForm;


